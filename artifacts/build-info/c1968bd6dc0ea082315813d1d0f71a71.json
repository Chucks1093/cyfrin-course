{"id":"c1968bd6dc0ea082315813d1d0f71a71","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    struct Person {\n        string name;\n        uint256 age;\n        bool isActive;\n        address walletAddress;\n    }\n\n    uint256 public favouriteNumber;\n\n    mapping(string => bool) public nameToIsActive;\n\n    Person public pat = Person({\n        name: \"Sebastian\",\n        age: 54,\n        isActive: false,\n        walletAddress: 0x6AdDB767E9D0F4A0B538a4aCEf5749Ad3Dad6FD1\n    });\n\n    Person[] public allUsersDetails;\n\n    function store(uint256 _favouriteNumber) public {\n        favouriteNumber = _favouriteNumber;\n        retrieve();\n    }\n\n    function addPerson(string memory _name, uint256 _age, bool _isActive, address _walletAddress) public {\n        Person memory newPerson = Person(_name, _age, _isActive, _walletAddress);\n        allUsersDetails.push(newPerson);\n        nameToIsActive[_name] = _isActive;\n    }\n\n    function retrieve() public view returns (uint256) {\n        return favouriteNumber;\n    }\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"MyContract":[85]},"id":86,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"MyContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":85,"linearizedBaseContracts":[85],"name":"MyContract","nameLocation":"66:10:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MyContract.Person","id":10,"members":[{"constant":false,"id":3,"mutability":"mutable","name":"name","nameLocation":"114:4:0","nodeType":"VariableDeclaration","scope":10,"src":"107:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"107:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5,"mutability":"mutable","name":"age","nameLocation":"136:3:0","nodeType":"VariableDeclaration","scope":10,"src":"128:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"isActive","nameLocation":"154:8:0","nodeType":"VariableDeclaration","scope":10,"src":"149:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6,"name":"bool","nodeType":"ElementaryTypeName","src":"149:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"walletAddress","nameLocation":"180:13:0","nodeType":"VariableDeclaration","scope":10,"src":"172:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"172:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Person","nameLocation":"90:6:0","nodeType":"StructDefinition","scope":85,"src":"83:117:0","visibility":"public"},{"constant":false,"functionSelector":"43ede4ae","id":12,"mutability":"mutable","name":"favouriteNumber","nameLocation":"221:15:0","nodeType":"VariableDeclaration","scope":85,"src":"206:30:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11,"name":"uint256","nodeType":"ElementaryTypeName","src":"206:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"a83fbe54","id":16,"mutability":"mutable","name":"nameToIsActive","nameLocation":"274:14:0","nodeType":"VariableDeclaration","scope":85,"src":"243:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string => bool)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"251:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"243:23:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"bool","nodeType":"ElementaryTypeName","src":"261:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"b4a24f50","id":25,"mutability":"mutable","name":"pat","nameLocation":"309:3:0","nodeType":"VariableDeclaration","scope":85,"src":"295:170:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_storage","typeString":"struct MyContract.Person"},"typeName":{"id":18,"nodeType":"UserDefinedTypeName","pathNode":{"id":17,"name":"Person","nameLocations":["295:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"295:6:0"},"referencedDeclaration":10,"src":"295:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_storage_ptr","typeString":"struct MyContract.Person"}},"value":{"arguments":[{"hexValue":"53656261737469616e","id":20,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"338:11:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_72bb7a3050c3a843bf167179204f682a392544df1ea72256092990a90be834db","typeString":"literal_string \"Sebastian\""},"value":"Sebastian"},{"hexValue":"3534","id":21,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"364:2:0","typeDescriptions":{"typeIdentifier":"t_rational_54_by_1","typeString":"int_const 54"},"value":"54"},{"hexValue":"66616c7365","id":22,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"386:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"307836416444423736374539443046344130423533386134614345663537343941643344616436464431","id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"416:42:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x6AdDB767E9D0F4A0B538a4aCEf5749Ad3Dad6FD1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_72bb7a3050c3a843bf167179204f682a392544df1ea72256092990a90be834db","typeString":"literal_string \"Sebastian\""},{"typeIdentifier":"t_rational_54_by_1","typeString":"int_const 54"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"}],"id":19,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"315:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$10_storage_ptr_$","typeString":"type(struct MyContract.Person storage pointer)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["332:4:0","359:3:0","376:8:0","401:13:0"],"names":["name","age","isActive","walletAddress"],"nodeType":"FunctionCall","src":"315:150:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_memory_ptr","typeString":"struct MyContract.Person memory"}},"visibility":"public"},{"constant":false,"functionSelector":"14eaeb82","id":29,"mutability":"mutable","name":"allUsersDetails","nameLocation":"488:15:0","nodeType":"VariableDeclaration","scope":85,"src":"472:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$10_storage_$dyn_storage","typeString":"struct MyContract.Person[]"},"typeName":{"baseType":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"Person","nameLocations":["472:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"472:6:0"},"referencedDeclaration":10,"src":"472:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_storage_ptr","typeString":"struct MyContract.Person"}},"id":28,"nodeType":"ArrayTypeName","src":"472:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$10_storage_$dyn_storage_ptr","typeString":"struct MyContract.Person[]"}},"visibility":"public"},{"body":{"id":41,"nodeType":"Block","src":"558:71:0","statements":[{"expression":{"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":34,"name":"favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"568:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":35,"name":"_favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"586:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"568:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":37,"nodeType":"ExpressionStatement","src":"568:34:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":38,"name":"retrieve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"612:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"612:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":40,"nodeType":"ExpressionStatement","src":"612:10:0"}]},"functionSelector":"6057361d","id":42,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"519:5:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"_favouriteNumber","nameLocation":"533:16:0","nodeType":"VariableDeclaration","scope":42,"src":"525:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":30,"name":"uint256","nodeType":"ElementaryTypeName","src":"525:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"524:26:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"558:0:0"},"scope":85,"src":"510:119:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":75,"nodeType":"Block","src":"736:173:0","statements":[{"assignments":[55],"declarations":[{"constant":false,"id":55,"mutability":"mutable","name":"newPerson","nameLocation":"760:9:0","nodeType":"VariableDeclaration","scope":75,"src":"746:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_memory_ptr","typeString":"struct MyContract.Person"},"typeName":{"id":54,"nodeType":"UserDefinedTypeName","pathNode":{"id":53,"name":"Person","nameLocations":["746:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"746:6:0"},"referencedDeclaration":10,"src":"746:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_storage_ptr","typeString":"struct MyContract.Person"}},"visibility":"internal"}],"id":62,"initialValue":{"arguments":[{"id":57,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"779:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":58,"name":"_age","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"786:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":59,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"792:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":60,"name":"_walletAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"803:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"}],"id":56,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"772:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$10_storage_ptr_$","typeString":"type(struct MyContract.Person storage pointer)"}},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"772:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_memory_ptr","typeString":"struct MyContract.Person memory"}},"nodeType":"VariableDeclarationStatement","src":"746:72:0"},{"expression":{"arguments":[{"id":66,"name":"newPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"849:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$10_memory_ptr","typeString":"struct MyContract.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$10_memory_ptr","typeString":"struct MyContract.Person memory"}],"expression":{"id":63,"name":"allUsersDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"828:15:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$10_storage_$dyn_storage","typeString":"struct MyContract.Person storage ref[] storage ref"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"844:4:0","memberName":"push","nodeType":"MemberAccess","src":"828:20:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$10_storage_$dyn_storage_ptr_$_t_struct$_Person_$10_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$10_storage_$dyn_storage_ptr_$","typeString":"function (struct MyContract.Person storage ref[] storage pointer,struct MyContract.Person storage ref)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"828:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":68,"nodeType":"ExpressionStatement","src":"828:31:0"},{"expression":{"id":73,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":69,"name":"nameToIsActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"869:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_bool_$","typeString":"mapping(string memory => bool)"}},"id":71,"indexExpression":{"id":70,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"884:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"869:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":72,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"893:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"869:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":74,"nodeType":"ExpressionStatement","src":"869:33:0"}]},"functionSelector":"0739a50e","id":76,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"644:9:0","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"_name","nameLocation":"668:5:0","nodeType":"VariableDeclaration","scope":76,"src":"654:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":43,"name":"string","nodeType":"ElementaryTypeName","src":"654:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"_age","nameLocation":"683:4:0","nodeType":"VariableDeclaration","scope":76,"src":"675:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":48,"mutability":"mutable","name":"_isActive","nameLocation":"694:9:0","nodeType":"VariableDeclaration","scope":76,"src":"689:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":47,"name":"bool","nodeType":"ElementaryTypeName","src":"689:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"_walletAddress","nameLocation":"713:14:0","nodeType":"VariableDeclaration","scope":76,"src":"705:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"705:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"653:75:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"736:0:0"},"scope":85,"src":"635:274:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"965:39:0","statements":[{"expression":{"id":81,"name":"favouriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"982:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":80,"id":82,"nodeType":"Return","src":"975:22:0"}]},"functionSelector":"2e64cec1","id":84,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"924:8:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[],"src":"932:2:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":84,"src":"956:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":78,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"955:9:0"},"scope":85,"src":"915:89:0","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":86,"src":"57:949:0","usedErrors":[],"usedEvents":[]}],"src":"32:974:0"}}},"contracts":{"contracts/SimpleStorage.sol":{"MyContract":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_age","type":"uint256"},{"internalType":"bool","name":"_isActive","type":"bool"},{"internalType":"address","name":"_walletAddress","type":"address"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allUsersDetails","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"},{"internalType":"bool","name":"isActive","type":"bool"},{"internalType":"address","name":"walletAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"favouriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToIsActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pat","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"},{"internalType":"bool","name":"isActive","type":"bool"},{"internalType":"address","name":"walletAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favouriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsersDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"favouriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favouriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"MyContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xb5605ce2f671965aeee089500462772d343cc0e30507ffbb17b9d8dbd87a6a35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ac04246b415d105519ac28c0af88898077e3ac27981c849d285e597b7d15351\",\"dweb:/ipfs/QmVkBBX2gR3DRFzVLJABf9F9HJYGM6J9X7jQyNZXzh41hj\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:MyContract\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[11]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tsub.s!\t4, r2, r4\n\tjump.lt\t@.BB0_2\n\tld\tr1, r4\n\tshr.s\t224, r4, r4\n\tsub.s!\t@CPI0_8[0], r4, r5\n\tjump.le\t@.BB0_13\n\tsub.s!\t@CPI0_9[0], r4, r5\n\tjump.gt\t@.BB0_19\n\tsub.s!\t@CPI0_12[0], r4, r3\n\tjump.eq\t@.BB0_70\n\tsub.s!\t@CPI0_13[0], r4, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t320, r0, r1\n\tst.1\t64, r1\n\tadd\t9, r0, r1\n\tst.1\t256, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tst.1\t288, r1\n\tadd\t256, r0, r1\n\tst.1\t128, r1\n\tadd\t54, r0, r1\n\tst.1\t160, r1\n\tst.1\t192, r0\n\tadd\t@CPI0_2[0], r0, r1\n\tst.1\t224, r1\n\tadd\t2, r0, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_9\n\tadd\tr3, r0, stack-[10]\n\tadd\tr4, r0, stack-[11]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[10], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tadd\tstack-[11], r0, r4\n\tjump.ge\t@.BB0_9\n.BB0_10:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_10\n.BB0_9:\n\tld.1\t288, r1\n\tand\t@CPI0_4[0], r1, r1\n\tor\t18, r1, r1\n\tsstore\tr4, r1\n\tadd\t3, r0, r1\n\tld.1\t160, r2\n\tsstore\tr1, r2\n\tld.1\t192, r1\n\tsub!\tr1, r0, r1\n\tadd\t4, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_5[0], r2, r2\n\tor.ne\t1, r2, r2\n\tld.1\t224, r3\n\tshl.s\t8, r3, r3\n\tand\t@CPI0_6[0], r3, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_7[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_13:\n\tsub.s!\t@CPI0_14[0], r4, r3\n\tjump.eq\t@.BB0_21\n\tsub.s!\t@CPI0_15[0], r4, r3\n\tjump.eq\t@.BB0_57\n\tsub.s!\t@CPI0_16[0], r4, r1\n\tjump.ne\t@.BB0_2\n.BB0_70:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_21[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tsub.s!\t@CPI0_10[0], r4, r5\n\tjump.eq\t@.BB0_75\n\tsub.s!\t@CPI0_11[0], r4, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r4\n\tsload\tr4, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r6\n\tand\t127, r6, r1\n\tadd.ne\tr6, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_4\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_84\n\tst.1\t0, r4\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_82\n\tadd\t@CPI0_17[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_87:\n\tsload\tr2, r5\n\tadd\t160, r4, r3\n\tst.1\tr3, r5\n\tadd\t1, r2, r2\n\tadd\t32, r4, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_87\n\tjump\t@.BB0_82\n.BB0_21:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t132, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_19[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_25[0], r3, r6\n\tjump.ge\t@.BB0_26\n\tadd\t31, r3, r6\n\tsub.s\t32, r0, r9\n\tand\tr6, r9, r6\n\tadd\t63, r6, r6\n\tand\tr6, r9, r6\n\tsub.s!\t@CPI0_26[0], r6, r7\n\tjump.le\t@.BB0_28\n.BB0_26:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_57:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t5, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tmul\t3, r1, r5, r1\n\tadd\t@CPI0_22[0], r5, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr2, r4, r4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_4\n\tadd\tr5, r0, stack-[11]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_63\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[10], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_67\n\tadd\t160, r0, r1\n\tjump\t@.BB0_62\n.BB0_75:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_19[0], r1, r3\n\tjump.le\t@.BB0_78\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_78:\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[10]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[11]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r3\n\tadd\tstack-[11], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t1, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_84:\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t160, r0, r3\n\tadd.eq\t128, r0, r3\n.BB0_82:\n\tsub.s\t96, r3, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\t3, r0, r1\n\tsload\tr1, r3\n\tadd\t4, r0, r1\n\tsload\tr1, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[10]\n\tand\t255, r2, r4\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_18[0], r2, r5\n\tadd\tstack-[11], r0, r2\n\tnear_call\tr0, @abi_encode_string_uint256_bool_address, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r4\n\tjump\t@.BB0_83\n.BB0_28:\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r3\n\tadd\tr4, r3, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r2, r2\n\tjump.gt\t@.BB0_2\n\tadd\t32, r5, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_88\n\tadd\tr0, r0, r6\n.BB0_31:\n\tshl.s\t5, r6, r7\n\tptr.add\tr2, r7, r8\n\tld\tr8, r8\n\tadd\t160, r7, r7\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_31\n.BB0_88:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_33\n\tshl.s\t5, r5, r5\n\tptr.add\tr2, r5, r2\n\tshl.s\t3, r4, r4\n\tadd\t160, r5, r5\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r6, r2\n\tst.1\tr5, r2\n.BB0_33:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r5\n\tsub!\tr5, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr5, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t100, r1, r2\n\tld\tr2, r2\n\tand\t@CPI0_18[0], r2, r3\n\tsub.s!\t@CPI0_18[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_26[0], r2, r4\n\tjump.gt\t@.BB0_26\n\tadd\t128, r2, r4\n\tst.1\t64, r4\n\tadd\t128, r0, r4\n\tst.1.inc\tr2, r4, r6\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\t96, r2, r4\n\tadd\tr4, r0, stack-[11]\n\tst.1\tr4, r3\n\tadd\t64, r2, r3\n\tadd\tr3, r0, stack-[9]\n\tst.1\tr3, r5\n\tadd\tr6, r0, stack-[10]\n\tst.1\tr6, r1\n\tadd\t5, r0, r3\n\tsload\tr3, r1\n\tsub.s!\t@CPI0_19[0], r1, r4\n\tjump.gt\t@.BB0_26\n\tadd\t1, r1, r4\n\tsstore\tr3, r4\n\tst.1\t0, r3\n\tmul\t3, r1, r3, r1\n\tadd\tr3, r0, stack-[6]\n\tadd\t@CPI0_22[0], r3, stack-[8]\n\tld.1\tr2, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1.inc\tr1, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\tr1, r0, stack-[7]\n\tsub.s!\t@CPI0_19[0], r1, r1\n\tjump.gt\t@.BB0_26\n\tadd\tr9, r0, stack-[1]\n\tadd\tr5, r0, stack-[2]\n\tadd\tstack-[8], r0, r1\n\tsload\tr1, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tadd\tr3, r0, stack-[3]\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_4\n\tadd\tstack-[3], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_43\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_43\n.BB0_44:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_44\n.BB0_43:\n\tadd\tstack-[7], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_54\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[1], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[7], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_49\n\tadd\t32, r0, r2\n\tjump\t@.BB0_51\n.BB0_63:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_62:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[10]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r2\n\tadd\t@CPI0_23[0], r2, r1\n\tsload\tr1, r3\n\tadd\t@CPI0_24[0], r2, r1\n\tsload\tr1, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[11]\n\tand\t255, r2, r4\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_18[0], r2, r5\n\tadd\tstack-[10], r0, r2\n\tnear_call\tr0, @abi_encode_string_uint256_bool_address, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r4\n.BB0_83:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_67:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_68:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_68\n\tadd\t192, r2, r1\n\tjump\t@.BB0_62\n.BB0_54:\n\tsub!\tstack-[7], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_56\n\tadd\tstack-[4], r0, r1\n\tld.1\tr1, r1\n.BB0_56:\n\tadd\tstack-[7], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_45\n.BB0_49:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[5], r0, r6\n.BB0_50:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_50\n.BB0_51:\n\tsub.s!\tstack-[7], r3, r3\n\tjump.ge\t@.BB0_53\n\tadd\tstack-[7], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[5], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_53:\n\tadd\t1, r0, r1\n\tadd\tstack-[7], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_45:\n\tor\tr2, r1, r1\n\tadd\tstack-[8], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tadd\tstack-[6], r0, r3\n\tadd\t@CPI0_23[0], r3, r2\n\tsstore\tr2, r1\n\tadd\tstack-[9], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\t@CPI0_24[0], r3, r1\n\tsload\tr1, r2\n\tand\t@CPI0_5[0], r2, r2\n\tor.ne\t1, r2, r2\n\tadd\tstack-[11], r0, r3\n\tld.1\tr3, r3\n\tshl.s\t8, r3, r3\n\tand\t@CPI0_6[0], r3, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[10]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[11]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\t1, r0, r4\n\tadd\tstack-[10], r0, r3\n\tadd\tstack-[11], r0, r1\n\tadd\tr3, r1, r2\n\tst.1\tr2, r4\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsub.s\t256, r0, r2\n\tsload\tr1, r3\n\tand\tr3, r2, r2\n\tor\tstack-[2], r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_decode_string:\n.func_begin2:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI2_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI2_0[0], r2, r6\n\tand\t@CPI2_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI2_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB2_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI2_1[0], r4, r1\n\tjump.ge\t@.BB2_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI2_2[0], r5, r8\n\tjump.gt\t@.BB2_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB2_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB2_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB2_12\n\tadd\tr0, r0, r7\n.BB2_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB2_9\n.BB2_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB2_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB2_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB2_3:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin3:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB3_3\n\tadd\tr0, r0, r4\n.BB3_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB3_2\n.BB3_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end3:\n\nabi_encode_string_uint256_bool_address:\n.func_begin4:\n\tadd\t128, r0, r6\n\tst.1.inc\tr1, r6, r6\n\tadd\t128, r1, r9\n\tld.1.inc\tr2, r7, r8\n\tst.1\tr9, r7\n\tadd\t160, r1, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB4_3\n\tadd\tr0, r0, r9\n.BB4_2:\n\tadd\tr9, r2, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB4_2\n.BB4_3:\n\tadd\tr7, r2, r8\n\tst.1\tr8, r0\n\tand\t@CPI4_0[0], r5, r5\n\tadd\t96, r1, r8\n\tst.1\tr8, r5\n\tsub!\tr4, r0, r4\n\tadd\t0, r0, r4\n\tadd.ne\t1, r0, r4\n\tadd\t64, r1, r1\n\tst.1\tr1, r4\n\tst.1\tr6, r3\n\tadd\t31, r7, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\tr2, r1, r1\n\tret\n.func_end4:\n\n__sha3:\n.func_begin5:\n\tadd\t@CPI5_0[0], r0, r3\n\tsub.s!\t@CPI5_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI5_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_2\n\tld\tr1, r1\n\tret\n.BB5_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI5_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 37721096984369341755254146156029531662517692788198757488834435157405332406272\nCPI0_2:\n\t.cell 610097463304406644669785913790984983325824610257\nCPI0_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_4:\n\t.cell -24519928653854221733733552434404946937899825954937634816\nCPI0_5:\n\t.cell -374144419156711147060143317175368453031918731001856\nCPI0_6:\n\t.cell 374144419156711147060143317175368453031918731001600\nCPI0_7:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_8:\n\t.cell 1139664045\nCPI0_9:\n\t.cell 2822749779\nCPI0_10:\n\t.cell 2822749780\nCPI0_11:\n\t.cell 3030536016\nCPI0_12:\n\t.cell 1139664046\nCPI0_13:\n\t.cell 1616328221\nCPI0_14:\n\t.cell 121218318\nCPI0_15:\n\t.cell 350940034\nCPI0_16:\n\t.cell 778358465\nCPI0_17:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_18:\nCPI4_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_19:\nCPI1_0:\nCPI2_2:\n\t.cell 18446744073709551615\nCPI0_20:\n\t.cell 2535301200456458802993406410752\nCPI0_21:\n\t.cell 2535301202817642044428229017600\nCPI0_22:\n\t.cell 1546678032441257452667456735582814959992782782816731922691272282333561699760\nCPI0_23:\n\t.cell 1546678032441257452667456735582814959992782782816731922691272282333561699761\nCPI0_24:\n\t.cell 1546678032441257452667456735582814959992782782816731922691272282333561699762\nCPI0_25:\nCPI2_1:\n\t.cell 18446744073709551616\nCPI0_26:\n\t.cell 18446744073709551487\nCPI0_27:\nCPI1_1:\nCPI2_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_28:\nCPI1_2:\nCPI2_4:\n\t.cell 2852213850513516153367582212096\nCPI2_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI5_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":"0001000000000002000b0000000000020000000003020019000000000001035500000000020100190000006002200270000000bc022001970000000103300190000000210000c13d0000008003000039000000400030043f000000040420008c000000f90000413d000000000401043b000000e004400270000000c40540009c000000740000a13d000000c50540009c000000810000213d000000c80340009c0000007a0000613d000000c90340009c000000f90000c13d0000000003000416000000240220008c000000f90000413d000000000203004b000000f90000c13d0000000401100370000000000101043b000000000010041b0000000001000019000002ec0001042e0000000001000416000000000101004b000000f90000c13d0000014001000039000000400010043f0000000901000039000001000010043f000000bd01000041000001200010043f0000010001000039000000800010043f0000003601000039000000a00010043f000000c00000043f000000be01000041000000e00010043f0000000204000039000000000104041a000000010210019000000001011002700000007f0310018f000000000301c0190000001f0130008c00000000010000190000000101002039000000000112004b000000420000613d000000d70100004100000000001004350000002201000039000000040010043f000000d801000041000002ed00010430000000200130008c0000005d0000413d000a00000003001d000b00000004001d0000000000400435000000bc010000410000000002000414000000bc0320009c0000000002018019000000c001200210000000bf011001c7000080100200003902eb02e60000040f0000000102200190000000f90000613d000000000101043b0000000a020000290000001f0220003900000005022002700000000002210019000000000321004b0000000b040000290000005d0000813d000000000001041b0000000101100039000000000321004b000000590000413d000001200100043d000000c00110019700000012011001bf000000000014041b0000000301000039000000a00200043d000000000021041b000000c00100043d000000000101004b0000000401000039000000000201041a000000c102200197000000010220c1bf000000e00300043d0000000803300210000000c203300197000000000232019f000000000021041b000000200100003900000100001004430000012000000443000000c301000041000002ec0001042e000000ca0340009c000000a40000613d000000cb0340009c000000c20000613d000000cc0140009c000000f90000c13d0000000001000416000000000101004b000000f90000c13d000000000100041a000000800010043f000000d101000041000002ec0001042e000000c60540009c000000f00000613d000000c70140009c000000f90000c13d0000000001000416000000000101004b000000f90000c13d0000000204000039000000000204041a000000010520019000000001062002700000007f0160018f000000000106c0190000001f0610008c00000000060000190000000106002039000000000662013f00000001066001900000003c0000c13d000000800010043f000000000505004b000001150000613d0000000000400435000000000201004b0000011b0000613d000000cd020000410000000004000019000000000502041a000000a003400039000000000053043500000001022000390000002004400039000000000514004b0000009c0000413d0000011b0000013d0000000003000416000000840420008c000000f90000413d000000000303004b000000f90000c13d0000000403100370000000000403043b000000cf0340009c000000f90000213d0000002303400039000000000323004b000000f90000813d0000000405400039000000000351034f000000000303043b000000d50630009c000000bc0000813d0000001f06300039000000200900008a000000000696016f0000003f06600039000000000696016f000000d60760009c0000012c0000a13d000000d70100004100000000001004350000004101000039000000040010043f000000d801000041000002ed000104300000000003000416000000240220008c000000f90000413d000000000203004b000000f90000c13d0000000401100370000000000101043b0000000502000039000000000302041a000000000331004b000000f90000813d000000000020043500000003151000c9000000d201500041000000000201041a000000010320019000000001042002700000007f0640018f000000000604c0190000001f0460008c00000000040000190000000104002039000000000442013f00000001044001900000003c0000c13d000b00000005001d000000800060043f000000000303004b000001c40000613d000a00000006001d0000000000100435000000bc010000410000000002000414000000bc0320009c0000000002018019000000c001200210000000bf011001c7000080100200003902eb02e60000040f0000000102200190000000f90000613d0000000a05000029000000000205004b000001e50000c13d000000a001000039000001ca0000013d0000000003000416000000240420008c000000f90000413d000000000303004b000000f90000c13d0000000401100370000000000101043b000000cf0310009c000000fb0000a13d0000000001000019000002ed00010430000000040110003902eb02540000040f0000000013010434000a00000003001d000000400200043d000b00000002001d02eb02a30000040f0000000a030000290000000b01000029000000000413001900000001020000390000000000240435000000200230003902eb02d00000040f000000000101041a000000ff011001900000000001000019000000010100c039000000400200043d0000000000120435000000bc01000041000000bc0320009c00000000020180190000004001200210000000d0011001c7000002ec0001042e000001000300008a000000000232016f000000a00020043f000000000101004b000000a0030000390000008003006039000000600230008a0000008001000039000b00000001001d02eb02410000040f0000000301000039000000000301041a0000000401000039000000000201041a000000400100043d000a00000001001d000000ff0420018f0000000802200270000000ce052001970000000b0200002902eb02b00000040f0000000a04000029000001db0000013d0000008006600039000000400060043f000000800030043f00000000043400190000002404400039000000000224004b000000f90000213d0000002002500039000000000221034f0000001f0430018f0000000505300272000001410000613d00000000060000190000000507600210000000000872034f000000000808043b000000a00770003900000000008704350000000106600039000000000756004b000001390000413d000000000604004b000001500000613d0000000505500210000000000252034f0000000304400210000000a005500039000000000605043300000000064601cf000000000646022f000000000202043b0000010004400089000000000242022f00000000024201cf000000000262019f0000000000250435000000a00230003900000000000204350000004402100370000000000502043b000000000205004b0000000002000019000000010200c039000000000225004b000000f90000c13d0000006402100370000000000202043b000000ce03200197000000ce0220009c000000f90000213d000000400200043d000000d60420009c000000bc0000213d0000008004200039000000400040043f000000800400003900000000064204360000002401100370000000000101043b0000006004200039000b00000004001d00000000003404350000004003200039000900000003001d0000000000530435000a00000006001d00000000001604350000000503000039000000000103041a000000cf0410009c000000bc0000213d0000000104100039000000000043041b000000000030043500000003131000c9000600000003001d000800d2003000450000000001020433000500000001001d0000000021010434000400000002001d000700000001001d000000cf0110009c000000bc0000213d000100000009001d000200000005001d0000000801000029000000000101041a000000010210019000000001021002700000007f0320018f000000000302c019000300000003001d0000001f0230008c00000000020000190000000102002039000000000121013f00000001011001900000003c0000c13d0000000301000029000000200110008c000001af0000413d00000008010000290000000000100435000000bc010000410000000002000414000000bc0320009c0000000002018019000000c001200210000000bf011001c7000080100200003902eb02e60000040f0000000102200190000000f90000613d00000007030000290000001f023000390000000502200270000000200330008c0000000002004019000000000301043b00000003010000290000001f01100039000000050110027000000000011300190000000002230019000000000312004b000001af0000813d000000000002041b0000000102200039000000000312004b000001ab0000413d00000007010000290000001f0110008c000001f10000a13d00000008010000290000000000100435000000bc010000410000000002000414000000bc0320009c0000000002018019000000c001200210000000bf011001c7000080100200003902eb02e60000040f00000001022001900000000102000029000000f90000613d0000000703200180000000000101043b000001fe0000c13d0000002002000039000002090000013d000001000100008a000000000112016f000000a00010043f000000000106004b000000c001000039000000a001006039000000800210008a0000008001000039000a00000001001d02eb02410000040f0000000b02000029000000d301200041000000000301041a000000d401200041000000000201041a000000400100043d000b00000001001d000000ff0420018f0000000802200270000000ce052001970000000a0200002902eb02b00000040f0000000b040000290000000001410049000000bc02000041000000bc0310009c0000000001028019000000bc0340009c000000000402801900000040024002100000006001100210000000000121019f000002ec0001042e000000000101043b00000000030000190000000002030019000000000301041a000000a004200039000000000034043500000001011000390000002003200039000000000453004b000001e70000413d000000c001200039000001ca0000013d000000070100006b0000000001000019000001f60000613d0000000401000029000000000101043300000007040000290000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000002180000013d00000020020000390000000004000019000000050600002900000000056200190000000005050433000000000051041b000000200220003900000001011000390000002004400039000000000534004b000002010000413d000000070330006c000002150000813d00000007030000290000000303300210000000f80330018f000000010400008a000000000334022f000000000343013f00000005022000290000000002020433000000000232016f000000000021041b000000010100003900000007020000290000000102200210000000000112019f0000000802000029000000000012041b0000000a0100002900000000010104330000000603000029000000d302300041000000000012041b00000009010000290000000001010433000000000101004b000000d401300041000000000201041a000000c102200197000000010220c1bf0000000b0300002900000000030304330000000803300210000000c203300197000000000232019f000000000021041b000000800300043d000a00000003001d000000400200043d000b00000002001d000000a00100003902eb02a30000040f00000001040000390000000a030000290000000b0100002900000000021300190000000000420435000000200230003902eb02d00000040f000001000200008a000000000301041a000000000223016f00000002022001af000000000021041b0000000001000019000002ec0001042e0000001f02200039000000200300008a000000000232016f0000000001120019000000000221004b00000000020000190000000102004039000000cf0310009c0000024e0000213d00000001022001900000024e0000c13d000000400010043f000000000001042d000000d70100004100000000001004350000004101000039000000040010043f000000d801000041000002ed0001043000000000030100190000001f01300039000000d904000041000000000521004b00000000050000190000000005044019000000d906200197000000d901100197000000000761004b000000000400a019000000000161013f000000d90110009c000000000405c019000000000104004b000002a10000613d0000000006000367000000000136034f000000000401043b000000d50140009c0000029b0000813d0000001f01400039000000200500008a000000000151016f0000003f01100039000000000551016f000000400100043d0000000005510019000000000715004b00000000070000190000000107004039000000cf0850009c0000029b0000213d00000001077001900000029b0000c13d000000400050043f000000000541043600000020033000390000000007430019000000000227004b000002a10000213d000000000336034f0000001f0240018f0000000506400272000002890000613d000000000700001900000005087002100000000009850019000000000883034f000000000808043b00000000008904350000000107700039000000000867004b000002810000413d000000000702004b000002980000613d0000000506600210000000000363034f00000000066500190000000302200210000000000706043300000000072701cf000000000727022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000272019f000000000026043500000000024500190000000000020435000000000001042d000000d70100004100000000001004350000004101000039000000040010043f000000d801000041000002ed000104300000000001000019000002ed00010430000000000403004b000002ad0000613d000000000400001900000000052400190000000006140019000000000606043300000000006504350000002004400039000000000534004b000002a60000413d00000000012300190000000000010435000000000001042d00000080060000390000000006610436000000800910003900000000870204340000000000790435000000a002100039000000000907004b000002c00000613d0000000009000019000000000a290019000000000b980019000000000b0b04330000000000ba04350000002009900039000000000a79004b000002b90000413d00000000082700190000000000080435000000ce0550019700000060081000390000000000580435000000000404004b0000000004000019000000010400c0390000004001100039000000000041043500000000003604350000001f01700039000000200300008a000000000131016f0000000001120019000000000001042d000000bc03000041000000bc0410009c00000000010380190000004001100210000000bc0420009c00000000020380190000006002200210000000000112019f0000000002000414000000bc0420009c0000000002038019000000c002200210000000000112019f000000da011001c7000080100200003902eb02e60000040f0000000102200190000002e40000613d000000000101043b000000000001042d0000000001000019000002ed00010430000002e9002104230000000102000039000000000001042d0000000002000019000000000001042d000002eb00000432000002ec0001042e000002ed000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff53656261737469616e00000000000000000000000000000000000000000000000000000000000000000000006addb767e9d0f4a0b538a4acef5749ad3dad6fd10200000000000000000000000000000000000020000000000000000000000000ffffffffffffffffff0000000000000000000000000000000000000000000000ffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000002000000000000000000000000000000400000010000000000000000000000000000000000000000000000000000000000000000000000000043ede4ad00000000000000000000000000000000000000000000000000000000a83fbe5300000000000000000000000000000000000000000000000000000000a83fbe5400000000000000000000000000000000000000000000000000000000b4a24f500000000000000000000000000000000000000000000000000000000043ede4ae000000000000000000000000000000000000000000000000000000006057361d000000000000000000000000000000000000000000000000000000000739a50e0000000000000000000000000000000000000000000000000000000014eaeb82000000000000000000000000000000000000000000000000000000002e64cec1405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000800000000000000000036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db20000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffff7f4e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000008000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008c0effc9ab9b3dbb2ef8d9e3b7a32c104da5eb5da76f3256c2d805b096354823"},"methodIdentifiers":{"addPerson(string,uint256,bool,address)":"0739a50e","allUsersDetails(uint256)":"14eaeb82","favouriteNumber()":"43ede4ae","nameToIsActive(string)":"a83fbe54","pat()":"b4a24f50","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"MyContract_85\" {\n    code {\n        {\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let newFreePtr := add(_1, 128)\n            let _2 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x24)\n            }\n            let newFreePtr_1 := add(_1, 192)\n            if or(gt(newFreePtr_1, _2), lt(newFreePtr_1, newFreePtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr_1)\n            mstore(newFreePtr, 9)\n            let _3 := add(_1, 160)\n            mstore(_3, \"Sebastian\")\n            mstore(_1, newFreePtr)\n            /// @src 0:315:465  \"Person({...\"\n            let _4 := add(_1, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x20)\n            mstore(_4, /** @src 0:364:366  \"54\" */ 0x36)\n            /// @src 0:315:465  \"Person({...\"\n            let _5 := add(_1, /** @src 0:57:1006  \"contract MyContract {...\" */ 64)\n            /// @src -1:-1:-1\n            let _6 := 0\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            mstore(_5, /** @src -1:-1:-1 */ _6)\n            /// @src 0:315:465  \"Person({...\"\n            let _7 := add(_1, 96)\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            mstore(_7, /** @src 0:416:458  \"0x6AdDB767E9D0F4A0B538a4aCEf5749Ad3Dad6FD1\" */ 0x6addb767e9d0f4a0b538a4acef5749ad3dad6fd1)\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            let _8 := sload(/** @src 0:315:465  \"Person({...\" */ 0x02)\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            let length := /** @src -1:-1:-1 */ _6\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            let _9 := 1\n            length := shr(1, _8)\n            let outOfPlaceEncoding := and(_8, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 0x20))\n            {\n                mstore(/** @src -1:-1:-1 */ _6, /** @src 0:57:1006  \"contract MyContract {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ _6, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ _6, /** @src 0:315:465  \"Person({...\" */ 0x02)\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _6, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x20)\n                let _10 := add(data, shr(5, add(length, 31)))\n                let start := data\n                for { } lt(start, _10) { start := add(start, _9) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _6)\n                }\n            }\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            sstore(/** @src 0:315:465  \"Person({...\" */ 0x02, /** @src 0:57:1006  \"contract MyContract {...\" */ or(and(mload(_3), not(sub(shl(184, 1), 1))), 18))\n            sstore(3, mload(_4))\n            let cleaned := iszero(iszero(mload(_5)))\n            let _11 := sload(4)\n            sstore(4, or(or(and(_11, not(sub(shl(168, 1), 1))), and(cleaned, 255)), and(shl(8, mload(_7)), sub(shl(168, 1), 256))))\n            let _12 := mload(64)\n            let _13 := datasize(\"MyContract_85_deployed\")\n            codecopy(_12, dataoffset(\"MyContract_85_deployed\"), _13)\n            return(_12, _13)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"MyContract_85_deployed\" {\n        code {\n            {\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x0739a50e {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 128) { revert(_3, _3) }\n                        let offset := calldataload(_2)\n                        let _4 := 0xffffffffffffffff\n                        if gt(offset, _4) { revert(_3, _3) }\n                        let value0 := abi_decode_string(add(_2, offset), calldatasize())\n                        let value := calldataload(68)\n                        let _5 := iszero(iszero(value))\n                        if iszero(eq(value, _5)) { revert(_3, _3) }\n                        let value_1 := calldataload(100)\n                        let _6 := and(value_1, sub(shl(160, 1), 1))\n                        if iszero(eq(value_1, _6)) { revert(_3, _3) }\n                        let memPtr := mload(_1)\n                        let newFreePtr := add(memPtr, 128)\n                        if or(gt(newFreePtr, _4), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        mstore(_1, newFreePtr)\n                        mstore(memPtr, value0)\n                        let _7 := 32\n                        /// @src 0:772:818  \"Person(_name, _age, _isActive, _walletAddress)\"\n                        let _8 := add(memPtr, /** @src 0:57:1006  \"contract MyContract {...\" */ _7)\n                        mstore(_8, calldataload(36))\n                        /// @src 0:772:818  \"Person(_name, _age, _isActive, _walletAddress)\"\n                        let _9 := add(memPtr, /** @src 0:57:1006  \"contract MyContract {...\" */ _1)\n                        mstore(_9, _5)\n                        /// @src 0:772:818  \"Person(_name, _age, _isActive, _walletAddress)\"\n                        let _10 := add(memPtr, /** @src 0:57:1006  \"contract MyContract {...\" */ 96)\n                        mstore(_10, _6)\n                        let oldLen := sload(/** @src 0:828:843  \"allUsersDetails\" */ 0x05)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _11 := 1\n                        sstore(/** @src 0:828:843  \"allUsersDetails\" */ 0x05, /** @src 0:57:1006  \"contract MyContract {...\" */ add(oldLen, _11))\n                        let slot, offset_1 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, _3)\n                            revert(_3, 36)\n                        }\n                        let _12 := mload(memPtr)\n                        let newLen := mload(_12)\n                        if gt(newLen, _4)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _13 := extract_byte_array_length(sload(slot))\n                        if gt(_13, 31)\n                        {\n                            mstore(_3, slot)\n                            let data := keccak256(_3, _7)\n                            let deleteStart := add(data, shr(/** @src 0:828:843  \"allUsersDetails\" */ 0x05, /** @src 0:57:1006  \"contract MyContract {...\" */ add(newLen, 31)))\n                            if lt(newLen, _7) { deleteStart := data }\n                            let _14 := add(data, shr(/** @src 0:828:843  \"allUsersDetails\" */ 0x05, /** @src 0:57:1006  \"contract MyContract {...\" */ add(_13, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _14) { start := add(start, _11) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _7\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_3, slot)\n                            let dstPtr := keccak256(_3, _7)\n                            let i := _3\n                            for { } lt(i, loopEnd) { i := add(i, _7) }\n                            {\n                                sstore(dstPtr, mload(add(_12, srcOffset)))\n                                dstPtr := add(dstPtr, _11)\n                                srcOffset := add(srcOffset, _7)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_12, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_11, newLen), _11))\n                        }\n                        default {\n                            let value_2 := _3\n                            if newLen\n                            {\n                                value_2 := mload(add(_12, srcOffset))\n                            }\n                            sstore(slot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_11, newLen)))\n                        }\n                        sstore(add(slot, _11), mload(_8))\n                        let memberSlot := add(slot, 2)\n                        update_storage_value_offsett_bool_to_bool(memberSlot, iszero(iszero(mload(_9))))\n                        let _15 := mload(_10)\n                        let _16 := sload(memberSlot)\n                        sstore(memberSlot, or(and(_16, not(sub(shl(168, 1), 256))), and(shl(8, _15), sub(shl(168, 1), 256))))\n                        let pos := mload(_1)\n                        let length := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _7), pos, length)\n                        let end := add(pos, length)\n                        mstore(end, _11)\n                        /// @src 0:869:902  \"nameToIsActive[_name] = _isActive\"\n                        update_storage_value_offsett_bool_to_bool(/** @src 0:57:1006  \"contract MyContract {...\" */ keccak256(pos, add(sub(end, pos), _7)), /** @src 0:869:902  \"nameToIsActive[_name] = _isActive\" */ value)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        return(_3, _3)\n                    }\n                    case 0x14eaeb82 {\n                        if callvalue() { revert(_3, _3) }\n                        let _17 := 32\n                        if slt(add(calldatasize(), not(3)), _17) { revert(_3, _3) }\n                        let value_3 := calldataload(_2)\n                        /// @src 0:472:503  \"Person[] public allUsersDetails\"\n                        if iszero(lt(value_3, /** @src 0:57:1006  \"contract MyContract {...\" */ sload(/** @src 0:472:503  \"Person[] public allUsersDetails\" */ 5)))\n                        {\n                            revert(/** @src 0:57:1006  \"contract MyContract {...\" */ _3, _3)\n                        }\n                        /// @src 0:472:503  \"Person[] public allUsersDetails\"\n                        let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(value_3)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        let memPtr_1 := mload(_1)\n                        let ret := _3\n                        let slotValue := sload(slot_1)\n                        let length_1 := extract_byte_array_length(slotValue)\n                        mstore(memPtr_1, length_1)\n                        let _18 := 1\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(memPtr_1, _17), and(slotValue, not(255)))\n                            ret := add(add(memPtr_1, shl(/** @src 0:472:503  \"Person[] public allUsersDetails\" */ 5, /** @src 0:57:1006  \"contract MyContract {...\" */ iszero(iszero(length_1)))), _17)\n                        }\n                        case 1 {\n                            mstore(_3, slot_1)\n                            let dataPos := keccak256(_3, _17)\n                            let i_1 := _3\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, _17) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), _17), sload(dataPos))\n                                dataPos := add(dataPos, _18)\n                            }\n                            ret := add(add(memPtr_1, i_1), _17)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret, memPtr_1))\n                        let _19 := sload(/** @src 0:472:503  \"Person[] public allUsersDetails\" */ add(slot_1, /** @src 0:57:1006  \"contract MyContract {...\" */ 1))\n                        let _20 := sload(/** @src 0:472:503  \"Person[] public allUsersDetails\" */ add(slot_1, 2))\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        let memPos := mload(_1)\n                        return(memPos, sub(abi_encode_string_uint256_bool_address(memPos, memPtr_1, _19, and(_20, 0xff), and(shr(8, _20), sub(shl(160, 1), 1))), memPos))\n                    }\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _21 := sload(_3)\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, _21)\n                        return(memPos_1, 32)\n                    }\n                    case 0x43ede4ae {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _22 := sload(_3)\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, _22)\n                        return(memPos_2, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        sstore(_3, calldataload(_2))\n                        return(_3, _3)\n                    }\n                    case 0xa83fbe54 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let offset_3 := calldataload(_2)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_3, _3) }\n                        let value0_1 := abi_decode_string(add(_2, offset_3), calldatasize())\n                        let pos_1 := mload(_1)\n                        let length_2 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_2)\n                        let end_1 := add(pos_1, length_2)\n                        mstore(end_1, /** @src 0:243:288  \"mapping(string => bool) public nameToIsActive\" */ 1)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        let value_4 := and(sload(keccak256(pos_1, add(sub(end_1, pos_1), 32))), 0xff)\n                        let memPos_3 := mload(_1)\n                        mstore(memPos_3, iszero(iszero(value_4)))\n                        return(memPos_3, 32)\n                    }\n                    case 0xb4a24f50 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let memPtr_2 := mload(_1)\n                        let ret_1 := _3\n                        let slotValue_1 := sload(/** @src 0:295:465  \"Person public pat = Person({...\" */ 2)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        let length_3 := extract_byte_array_length(slotValue_1)\n                        mstore(memPtr_2, length_3)\n                        let _23 := 0x20\n                        let _24 := 1\n                        switch and(slotValue_1, 1)\n                        case 0 {\n                            mstore(add(memPtr_2, 0x20), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_3)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(_3, /** @src 0:295:465  \"Person public pat = Person({...\" */ 2)\n                            /// @src 0:57:1006  \"contract MyContract {...\"\n                            let dataPos_1 := 29102676481673041902632991033461445430619272659676223336789171408008386403022\n                            let i_2 := _3\n                            for { } lt(i_2, length_3) { i_2 := add(i_2, _23) }\n                            {\n                                mstore(add(add(memPtr_2, i_2), _23), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, _24)\n                            }\n                            ret_1 := add(add(memPtr_2, i_2), 0x20)\n                        }\n                        finalize_allocation(memPtr_2, sub(ret_1, memPtr_2))\n                        let _25 := sload(/** @src 0:295:465  \"Person public pat = Person({...\" */ 3)\n                        /// @src 0:57:1006  \"contract MyContract {...\"\n                        let _26 := sload(_2)\n                        let memPos_4 := mload(_1)\n                        return(memPos_4, sub(abi_encode_string_uint256_bool_address(memPos_4, memPtr_2, _25, and(_26, 0xff), and(shr(8, _26), sub(shl(160, 1), 1))), memPos_4))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:57:1006  \"contract MyContract {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                array := memPtr\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:828:843  \"allUsersDetails\" */ 0x05)))\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:828:843  \"allUsersDetails\" */ 0x05)\n                /// @src 0:57:1006  \"contract MyContract {...\"\n                slot := add(1546678032441257452667456735582814959992782782816731922691272282333561699760, mul(index, 3))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:57:1006  \"contract MyContract {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_uint256_bool_address(headStart, value0, value1, value2, value3) -> tail\n            {\n                mstore(headStart, 128)\n                let length := mload(value0)\n                mstore(add(headStart, 128), length)\n                copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(headStart, 160), length)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 160)\n                mstore(add(headStart, 0x20), value1)\n                mstore(add(headStart, 64), iszero(iszero(value2)))\n                mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n            }\n            function update_storage_value_offsett_bool_to_bool(slot, value)\n            {\n                let value_1 := and(sload(slot), not(255))\n                sstore(slot, or(value_1, and(iszero(iszero(value)), 255)))\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ada0bb5b1198dcf6e5e431e2e40afc5d955edcb5de77cba8addf4b8ee0d4966a64736f6c63430008180033\"\n    }\n}\n","hash":"010000dd6ee1d524f71ede77b1bccc36dc5aa8bab354c2cd546167a4560860db","factoryDependencies":{}}}}}}